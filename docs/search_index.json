[["index.html", "Resources Chapter 1 Preface 1.1 Learning goals", " Resources Noushin Nabavi &amp; Monica Granados 2021-02-13 Chapter 1 Preface A repository to house materials for a open and reproducible workflows in the public service workshop. The goal of this workshop is to introduce participants to concepts of reproducible research. Reproducible research is the idea that data analyses, and more generally, scientific claims, are published with their data and software code so that others may verify the findings and build upon them. This workshop focuses on the concepts and tools behind reporting modern data analyses in a reproducible manner. As part of this, we introduce tools that enable publishing data analyses in a single document that allows others to easily execute the same analysis to obtain the same results. Additionally, as part of this workshop, we briefly introduce working with R and Rstudio to create a Rmarkdown document. R is a popular statistical computing language, commonly used in many scientific disciplines for statistical analysis, generating production-quality graphics, and automating data workflow tasks. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/. 1.1 Learning goals By the end of this workshop, EW2 participants will learn be able to: - Define reproducible research and open workflows - Discuss current issues surrounding reproducibility - Discuss solutions and important components of reproducibility - Identify tools that are used for reproducible and open research In the demonstration part of the workshop, we will: Write basic markdown documents Use knitr, rmarkdown and bookdown R packages to build various document types (e.g. PDF, HTML and DOCX) Create reproducible rmarkdown documents leveraging .Rproj and .RData Create presentations from Rmarkdown documents that include R code Work with git version control tools Create reproducible and “backed up” analysis via remote repositories (e.g github) "],["introduction-to-reproducible-research.html", "Chapter 2 Introduction to reproducible research 2.1 what is reproducible research? 2.2 Terminology distinctions 2.3 Reproducible versus replicable 2.4 Reproducible versus repeatable 2.5 Reproducibility crisis 2.6 The problem in the context of public service 2.7 The solution in the context of public service 2.8 Barriers to open and reproducible workflows 2.9 What needs to be reproduced? 2.10 Motivation 2.11 Benefits of reproducubility 2.12 How to make research reproducible 2.13 Requirements for reproducibility 2.14 Additional requirements", " Chapter 2 Introduction to reproducible research The terms reproducible research was coined by Jon Claerbout in the 1980s when he writes an essay on reproducible computational research, and describes the hurdles he faces when making a text book that incorporates text, data, and results in a stand-alone document. According to Claerbout’s principle, ‘scholarship does not only consist of theorems and proofs but also and perhaps even more important of data, computer code and a runtime environment which provides readers with the possibility to reproduce all tables and figures in an article’. The need for reproducibility is increasing dramatically as data analyses become more complex and involve larger datasets, analysts, and more sophisticated computations. 2.1 what is reproducible research? According to a U.S. National Science Foundation (NSF) subcommittee on replicability in science, “reproducibility refers to the ability of a researcher to duplicate the results of a prior study using the same materials as were used by the original investigator. This entails that a result obtained by an experiment or observational study should be achieved again with a high degree of agreement when the study is replicated with the same methodology by different researchers 2.2 Terminology distinctions Reproducible research is sometimes known as reproducibility, reproducible statistical analysis, reproducible data analysis, reproducible reporting, and literate programming. 2.3 Reproducible versus replicable Replicability means obtaining consistent results across studies aimed at answering the same scientific question, each of which has obtained its own data. 2.4 Reproducible versus repeatable Repeatability measures the variation in measurements taken by a single instrument or person under the same conditions, while reproducibility measures whether an entire study or experiment can be reproduced in its entirety. This is a way for researchers to verify that their own results are true and are not just chance artifacts. 2.5 Reproducibility crisis The replication crisis (or replicability crisis or reproducibility crisis) is, as of 2020, an ongoing methodological crisis in which it has been found that many scientific studies are difficult or impossible to replicate or reproduce. The replication crisis affects the social sciences and medicine most severely. 2.6 The problem in the context of public service Government is closed The public doesn’t know how decisions are made Duplication of work within the government Types of reproducibility 2.7 The solution in the context of public service Openness and transparency in government Evidence based decision making Efficiency Enable others to use our methods or help improve ours 2.8 Barriers to open and reproducible workflows Directives Approval of management Data privacy and security policies Culture 2.9 What needs to be reproduced? For evidence-informed decision making, results need to be reproducible. The results include: - Stattistical and inferential tables - Visualizations/figures/graphs - Values reported in the text - The statistical evidence in support of the findings (e.g., p-values, confidence intervals, credible intervals). 2.10 Motivation Some aspects to consider that may make your experiments, processes, and reports more reproducible: 1. Don’t Read Between the Lines. … 2. Be Strict. … 3. Keep Things Transparent. … 4. Collaborate. … 5. Automate Your Processes. 2.11 Benefits of reproducubility Increased likelihood that the research will be correct Reproducibility makes it easier to check the research It is easier to reproduce the research independently Easier to extend the research Reusable code and instruction resulting in increased efficiencies 2.12 How to make research reproducible The first reason to repeat experiments is simply to verify results. Different science disciplines have different criteria for determining what good results are. The next reason to repeat experiments is to develop skills necessary to extend established methods and develop new experiments. For these, we need reproducible methods, tools, and platforms. 2.13 Requirements for reproducibility The “raw” data is made available, where “raw” refers to the data prior to any manipulation by the researcher (e.g., prior to any data cleaning and transformation). A complete set of instructions is provided explaining all steps used in the processing and analyzing the data. 2.14 Additional requirements A set of files is provided containing the data and code, and it is possible to create the tables and any data-derived charts/graphics/visualizations by running the code. Details about the system being used to run the analysis: operating system, patches, random number seeds, specific versions of all software/packages/libraries are listed. The code is written in a way that can be readily understood. Open/transparent. All the data and materials are available (as opposed to “available upon request”) – e.g., posted on GitHub, or in an international data repository. That is, either: Another party (e.g., a reviewer) has successfully reproduced the results and certified them as such. Logs demonstrate that key results were successfully created from the inputs. The key results are linked to the data and code, so the relationship can be directly inspected. A final requirement, which is sometimes known as literate programming, is that: The entire report is written using code. That is, a file or files are provided which, when run, import the data, produce all the results, insert the results into the text of the report, and format the report. "],["tools-for-reproducible-projects.html", "Chapter 3 Tools for reproducible projects 3.1 Barriers 3.2 Tools", " Chapter 3 Tools for reproducible projects “An article about computational science in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures.” — Jonathan Buckheit and David Donoho, paraphrasing Jon Claerbout “In 2002, I felt like I would just remember everything forever,” Karl Broman, a biostatistician at the University of Wisconsin, Madison. “It was only later that it became clear that you start to forget things within a month.” 3.1 Barriers Human subject data or proprietary code aren’t shared and we need to implement creative solutions Journals and funders don’t reward reproducibility Analysts need to be taught reproducible methodology and there is a steep learning curve Need to make these efforts common place Software changes, new versions are released and older code breaks. Files are removed or moved and all the code breaks. One file is updated but the rest of the code/files are not updated. One forgets which files depend on which other files, or what has been changed 3.2 Tools “Your primary collaborator is yourself 6 months from now, and your past self doesn’t answer emails.” - software carpentry In this section, the tools that make reproducibility and open workflows easier are divided into four categories and these are not exhaustive. The categories include tools for data, methods, results, and communication products. The basics of research (data) management can be applied to every research project. These concepts include: i) storing data carefully and securely (according to the appropriate standards in the case of sensitive data) ii) backing up frequently and in at least two separate locations iii) using a file naming convention so that others within and outside a project can understand a file’s content. 3.2.1 Data The question we can ask ourselves is how can we make the data FAIR: findable, accessible, interoperable, and reusable? Findable: e.g. Make data available in trusted data repository Accessible (store in open non-proprietary platforms/formats): e.g. include comprehensive metadata Interoperable (standardized and has identifiers): e.g. store in open (non-proprietary) formats Reusable (open with comprehensive metadata): For open data, attach a licence or rights waiver, or a permanent identifier (i.e. DOI) Some tools include: - Shared drive/Local Area Network (LAN)/Sharepoint - Google sheets / OpenRefine - Open government portal - GitHub 3.2.2 Methods How can we make the process by which we do our work more open and reproducible? How could others access this work? Some tools include: - GCconnex - Protocols.io - GitHub 3.2.3 Results How can we adequately share the results with team members and tweak the methods to answer new questions/test new hypotheses? Some tool examples include: - Shared drive/LAN/Sharepoint - Google docs - Github 3.2.4 Communication products Once our work is done - how can we make it most accessible? Cochrane reports Open access publications Public talks Media/Social Media Github Other considerations: 1. Share data, software, workflows, methods and results in open trusted repositories 2. Persistent links, permanent identifiers for data, code, digital artifacts upon which the results depend 3. Enable credit for shared digital scholarly objects with citations 4. Adequately document to facilitate reuse 5. Use Open Licensing 6. Journals should conduct a reproducibility check 7. Funding agencies should instigate new research programs and pilot studies Stodden, McNutt, Bailey, Deelman, Gil, Hanson, Heroux, Ioannidis, and Taufer (2016) in Science Policy Forum "],["giving-and-receiving-credits.html", "Chapter 4 Giving and receiving credits", " Chapter 4 Giving and receiving credits How do we make sure that others credit our work and we credit others? We’ve often heard of Copyright, the authors’ and composers’ rights represented by the symbol ©. It means All rights reserved therefore, we can’t do anything with work that’s copyright protected, unless we get permission directly from the author or composer, his or her representative (editor) or collective societies entrusted by authors and composers to manage their rights. On the other hand, there exists the Copyleft, giving permission to anyone to copy, broadcast, use, modify and distribute work as long as some rights are reserved fairly. The author who chooses Copyleft lets other creators of the world know that they can do what they want with his or her work (within the limits of morality). Although Copyright and Copyleft are on opposite sides of the spectrum, there are additional parameters we can use. For instance, Creative Commons, provides the spectrum and helps us legally share our knowledge and creativity to build a more equitable, accessible, and innovative world — unlocking the full potential of the internet to drive a new era of development, growth and productivity. Creative Commons lets you create licenses by choosing one or more permissions based on parameters like copying your work, modifying (remixing) it, sharing it, broadcasting it, distributing it, reusing it, and its attribution (giving due credit to its author). Different combinations are available. Open source code licences (MIT/Open Canada) Information licences (Creative Commons) Github "],["introduction-to-markdown.html", "Chapter 5 Introduction to markdown 5.1 Rmarkdown and usage 5.2 Computation components 5.3 Narrative components 5.4 Rproject set-up 5.5 Demo", " Chapter 5 Introduction to markdown how does rmarkdown work? Advantages, disadvantages rmarkdown syntax (examples) 5.1 Rmarkdown and usage reproducible reporting with rmarkdown dichotomizing Rmarkdown document content to (1) computation component and (2) narrative component (@MikeKane, Yale) collectively called as research compendia Research Compedia: a container for the different elements that make up the document and its computations (i.e. text, code, data, …) and as a means for distributing, managing, and updating the collection. 5.2 Computation components Objects to be presented: usually plots and tables Reproducible code to visualize data 5.3 Narrative components Provide backgrounds, goals Contexualize computational components Establish themes Convey the results Render in pdf, html, docx 5.4 Rproject set-up Allows for integration of the two components (i.e. creation of Rmarkdowns with compuational components) Integrates literate programming Provide interpretability and facilitate reproducibility 5.5 Demo End-to-end demonstration of a reproducible project "],["git-commands.html", "Chapter 6 GIT Commands 6.1 GIT Terminology 6.2 GIT Commands 6.3 Resources", " Chapter 6 GIT Commands GIT Terminology GIT Commands Resources 6.1 GIT Terminology origin : connection pointing to the remote repository master : name of your default branch. A branch in Git is simply a lightweight movable pointer to a commit working directory : local repository .git directory : Git stores all of its repository data in the .git directory. This is created when a local repository is initialised using the init command .git.ignore : Git uses this file to determine which files and directories to ignore, before you make a commit hash: the commit command creates a unique ID called a hash, which is an absolute path HEAD : pointer to the last commit of the branch you are currently on. If you are on the master branch, then HEAD and master will refer to the same commit. This is a relative path. To see the previous commit use HEAD~1 6.2 GIT Commands Initialise git init &lt;local repository name&gt;initialises a new local repository Remotes git remote add &lt;remote name&gt; &lt;url&gt; creates a new connection to a remote repository is the shortcut for the and is typically set to ‘origin’ git remote show &lt;remote name&gt; shows which branch is automatically pushed to when you run git push while on certain branches. It also shows you which remote branches on the server you don’t yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you run git pull git remote rename &lt;remote name&gt; &lt;new remote name&gt; rename a remote git remote remove &lt;remote name&gt; remove a remote git remote -v lists the remotes that are configured Branches git branch &lt;new branch name&gt; adds a new branch, a structure with trees for saved states of files git checkout &lt;branch name&gt; &lt;filename&gt; checks out (i.e. switches to another version) an old version of a file git branch lists all of the branches in a repository, with a * next to the branch you are currently on git checkout &lt;branch-name&gt; switches to another branch-name git checkout -b branch-name&gt; creates the branch and switches you to it git merge source destination merges two branches Status git status shows which files have changed/new in your repository git diff shows the changes you made to the file git diff --staged shows the difference between the last committed change and what’s in the staging area git diff directory shows the changes to the files in the directory git diff -r HEAD -r flag refers to compare to a particular revision git log view the log of the project’s history git show &lt;hash&gt; view the details of a specific commit, with the first few characters of the commit’s hash git annotate &lt;filename&gt; shows who made the last change to each line of a file and when Clone git clone &lt;remote name&gt; to clone a repo and download a copy of a repo to a local folder This automatically creates the remote called origin Add git add adds from your working directory to your staging area, ie specifies what will go in a snapshot git add &lt;filename&gt; stages a file git add -A stages all new, modified and deleted git add &lt;foldername&gt;/* adds folder and contents to your staging area Remove git clean -n shows a list of files that are in the repository, but whose history Git is not currently tracking git clean -f will then delete those files Undo git reset undo ALL changes that have been staged with git add git reset HEAD &lt;filename&gt; undo changes to a specific filename that have been staged on HEAD Commit git commit -m \"&lt;message&gt;\" commits the file with the snapshot to the local repository locally. The commit records the changes to the file ie actually takes the snapshot and makes a permanent record of it Fetch git fetch gets any new work since last clone or fetch. Fetch does not however merge remote work with our work Pull git pull automatically fetches and then merges that remote branch into your current branch Push git push adds the files to your remote git Note on adding files to the remote: When it is your first push from a repo, you will first have to make the link between the local and remote repository via: git push --set-upstream origin master, or shorter git push -u origin master. As of then, git push will refer to the upstream branch you’ve set: i.e. origin / master 6.3 Resources Happy Git and GitHub for the useR by Jennifer Bryan adapted under Creative Commons Attribution-NonCommercial 4.0 International License. Pro Git book, written by Scott Chacon and Ben Straub adapted under the Creative Commons Attribution Non Commercial Share Alike 3.0 license Version Control with Git by Software Carpentry adapted under the Attribution 4.0 International (CC BY 4.0 license "],["resources-blogs-sites-books-courses.html", "Chapter 7 Resources (blogs, sites, books, courses):", " Chapter 7 Resources (blogs, sites, books, courses): Matthew Shotwell’s slides (2011): “Approaches and Barriers to Reproducible Practices in Biostatistics” NIH Training Module: Reproducibility through rigor and transparenct Gandrud, Christopher. Reproducible Research with R and R Studio, CRC Press, 2013. Xie, Yihui. Dynamic Documents with R and knitr, Vol. 29. CRC Press, 2013. ROpenSci’s blog post: “Reproducible research is still a challenge”, by R. FitzJohn, M. Pennell, A. Zanne, W. Cornwell, June 9, 2014 Karl Broman’s class “Tools for Reproducible Research” at UWisconsin-Madison. “Reproducible Research” by Johns Hopkins on Coursera (Peng, Leek, Caffo) Stodden, Victoria, Friedrich Leisch, and Roger D. Peng, eds. Implementing reproducible research, CRC Press, 2014. StackOverflow question “Why should I use version control?” Learn git on github: link "],["resources-1.html", "Chapter 8 Resources", " Chapter 8 Resources Reproducible research with R and RStudio: http://christophergandrud.github.io/RepResR-RStudio/ Tools for reproducible research: https://kbroman.org/Tools4RR/ Data privacy and security: https://dataprivacymanager.net/security-vs-privacy/ BC-Gov framework for github https://github.com/bcgov/BC-Policy-Framework-For-GitHub Making slides with Xaringan package in RMarkdown: https://arm.rbind.io/slides/xaringan.html Data wrangling with R: https://cengel.github.io/R-data-wrangling/ Data cleaning with R and tidyverse: https://towardsdatascience.com/data-cleaning-with-r-and-the-tidyverse-detecting-missing-values-ea23c519bc62 Gallery of missing data visualization: https://cran.r-project.org/web/packages/naniar/vignettes/naniar-visualisation.html How does R handle missing values: https://stats.idre.ucla.edu/r/faq/how-does-r-handle-missing-values/ What does research reproducibility mean? https://stm.sciencemag.org/content/8/341/341ps12 Challenge to scientists: does your ten-year-old code still run? https://www.nature.com/articles/d41586-020-02462-7?utm_source=twitter&amp;utm_medium=social&amp;utm_content=organic&amp;utm_campaign=NGMT_USG_JC01_GL_Nature#ref-CR1 Reproducible Research and open science: https://ropensci.github.io/reproducibility-guide/sections/introduction/ "]]
